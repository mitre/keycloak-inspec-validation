# This file was generated by `inspec init resource keycloak_realms`
# using the "--template plural" option. It represents a "plural" (FilterTable-based)
# InSpec resource.

# Plural resources query multiple resources of the same type in bulk. For details of the
# differences between singular and plural resources, please see:
# https://www.chef.io/blog/understanding-singular-and-plural-inspec-resources

# Plural resources rely on the FilterTable facility to handle data lookup and querying.
# For details on Filtertable and how to use it effectively within your resource, please see
# https://github.com/inspec/inspec/blob/main/dev-docs/filtertable-usage.md
# Consider that page required reading for authoring plural resources.

# Uncomment the below lines to add gems and files required by the resource
# require "inspec/utils/filter"
# require_relative ""

# Include FilterTable support
require "inspec/utils/filter"


module Inspec::Resources
  # Most custom InSpec resource inherit from a dynamic class, InSpec.resource(1).
  # If you wish to inherit from a core resource, you need to follow special instructions -
  # see https://www.chef.io/blog/extending-inspec-resources-core-resource-inheritance
  class KeycloakRealms < Inspec.resource(1)
    # Every resource requires an internal name.
    name "keycloak_realms"

    # # Restrict to only run on the below platforms (if none were given,
    # # all OS's and cloud API's supported)
    # # supports platform: "linux"

    # desc "Keycloak Realms"

    # example <<~EXAMPLE
    #   describe keycloak_realms.where{ shoe_size > 10 } do
    #     its("count") { should cmp 0 }
    #   end
    # EXAMPLE

    # Resource initialization. Add any arguments you want to pass to the contructor here.
    # Anything you pass here will be passed to the "describe" call:
    # describe keycloak_realms(YOUR_PARAMETERS_HERE) do
    #   its("shoe_size") { should cmp 10 }
    # end
    def initialize(opts)
      @opts = opts
      if opts.is_a?(Hash)
        @exception_realm_list = opts[:exception_realm_list] if opts[:exception_realm_list]
      end

    end

    # Define the FilterTable. This will define many extra methods on your resource, including
    # where(), count(), and a property for every column.
    FilterTable.create
      .register_column(:realms, field: :realm)
      .register_column(:displayNames, field: :displayName)
      .install_filter_methods_on_resource(self, :fetch_data)

    # Plural resources do not generally define a resource_id.

    # Define how you want your resource to appear in test reports. Commonly, this is just the resource name for plural resources.
    def to_s
      "keycloak_realms"
    end

    # Do whatever you need to do to fetch the underlying data.
    # Return it as an array of hashes.
    def fetch_data
      # binding.pry
      realm_rows = []
      # @keycloak_realms = get_realms
      @keycloak_realms = inspec.keycloak.get_realms
      # binding.pry
      @keycloak_realms.each do |keycloak_realm_info|
        next if @exception_realm_list.include? keycloak_realm_info["realm"]
        realm_rows+=[{ realm: keycloak_realm_info["realm"], displayName: keycloak_realm_info["displayName"]}]
      end
      @table = realm_rows
    end
    # def get_realms
    #   command = "#{@kcadm_path} get realms --no-config --server http://localhost:8080 --realm master --user #{@keycloak_admin} --password #{@keycloak_admin_password}"
    #   inspec.json(command: command)
    # end
  end
end
